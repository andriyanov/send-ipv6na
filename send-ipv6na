#!/usr/bin/perl

use Socket;
use Socket6;
use Getopt::Long;
use warnings;
use strict;

use constant IPPROTO_ICMPV6 => 58; # FreeBSD, /usr/src/sys/netinet/in.h
use constant ICMP6_FILTER => 18; # FreeBSD, /usr/src/sys/netinet6/in6.h
use constant MAX_NEIGHBOR_ADVERTISEMENT => 3; # RFC 4861
use constant RETRANS_TIMER => 1; # seconds, FRC 4861

my ($opt_tgt, $opt_dest, $opt_mac, $opt_delay, $opt_count,
	$opt_router, $opt_no_router, $opt_override, $opt_no_override,
	$opt_verbose, $opt_help);
$opt_dest = 'ff20::1'; # All nodes mcast group
$opt_delay = RETRANS_TIMER;
$opt_count = MAX_NEIGHBOR_ADVERTISEMENT;

sub usage() {
	print <<END;
usage: $0 [ OPTIONS ] ip6addr
Sends ICMPv6 NA message(s) to given destination.

valid options are:
 -d --to=ip6addr      destination IPv6 address (default: $opt_dest)
 -m --mac=l2addr      send given MAC in target link-layer address option
 -c --count=N         number of retransmissions (infinite: 0; default: $opt_count)
 -d --delay=N         sleep N seconds between retransmissions
 -r --router          set Router flag
 -R  --norouter       unset Router flag (default)
 -o --override        set Override flag (default)
 -O  --nooverride     unset Override flag
 -v --verbose
 -h --help
END
}

Getopt::Long::Configure ("no_ignore_case", "bundling");
GetOptions (
	"d|to:s" => \$opt_dest,
	"m|mac:s" => \$opt_mac,
	"c|count:i" => \$opt_count,
	"d|delay:i" => \$opt_delay,
	"r|router" => \$opt_router,
	"R|norouter" => \$opt_no_router,
	"o|override" => \$opt_override,
	"O|nooverride" => \$opt_no_override,
	"v|verbose" => \$opt_verbose,
	"h|help" => \$opt_help,
) or die "Error in command line arguments";

if ($opt_help) {
	&usage;
	exit 0;
}
$opt_tgt = shift @ARGV;
if (! defined $opt_tgt) {
	print STDERR "You must specify ip6addr\n";
	&usage;
	exit 1;
}
if (@ARGV) {
	print STDERR "Unknown options @ARGV\n";
	&usage;
	exit 1;
}

my $R_flag = $opt_router && !$opt_no_router ? '1' : '0';
my $O_flag = $opt_override || !$opt_no_override ? '1' : '0';

my $target_address = inet_pton AF_INET6, $opt_tgt;
defined $target_address or die "inet_pton(\"$opt_tgt\"): $!";
my $src = pack_sockaddr_in6 0, $target_address;

my $dest_address = inet_pton AF_INET6, $opt_dest;
defined $dest_address or die "inet_pton(\"$opt_dest\"): $!";
my $dst = pack_sockaddr_in6 0, $dest_address;

my $packet = pack ('CCnB8CCCa16',
	136, # type
	0,   # code
	0,   # checksum
	"${R_flag}0${O_flag}00000", # flags
	0, 0, 0, # reservation
	$target_address
);

# add Target Link-layer Address option
if (defined $opt_mac) {
	$packet .= pack ('CCa6',
		2, # Target Link-layer Address
		1, # in 8-byte chunks
		pack ('H2'x6, split /:/, $opt_mac),
	);
}

socket ICMP6, AF_INET6, SOCK_RAW, IPPROTO_ICMPV6 or die "socket(SOCK_RAW): $!";
setsockopt ICMP6, IPPROTO_ICMPV6, ICMP6_FILTER, pack ('N8', (0) x 8) or die "setsockopt(ICMPV6_FILTER): $!";
bind ICMP6, $src or die "bind: $!";

my $i = 0;
my $delay;
while (!$opt_count || ++$i <= $opt_count) {
	sleep $delay if defined $delay;
	$delay = $opt_delay;
	my $n_sent = send ICMP6, $packet, 0, $dst;
	defined $n_sent or die "sendto: $!";
	if ($opt_verbose) {
		my $flags = '';
		$flags .= 'R' if $R_flag;
		$flags .= 'O' if $O_flag;
		$flags = " ($flags)" if $flags ne '';
		print "$opt_tgt > $opt_dest: ICMP6, neighbor advertisement$flags, tgt is $opt_tgt, length $n_sent\n";
	}
}
